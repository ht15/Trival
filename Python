简单记录，
版本： python2.7


1. python字符串格式化
    占位符‘%’ ： %s、%d、%f、%x
      示例：
        print '今天是%d号%02d:%2d，天气%s,我吃了%.2f个月饼' % (10,0,36,'晴',1.5)

    format,占位符： {0}、{N}
      示例：
        str = 'Hello, {0}, 成绩提升了 {1:.1f}' # 四舍五入
        str.format('小明',1.355)
        
2. string是不可变对象， dict有get方法： d.get('xx',-1). 删除：pop         set: add & remove

3. python for循环iteritems(生成迭代器)           yield
    list1 =[1,3,5]
    list2 = list1 #指向同一块内存
    list3 = list1[:] #新开辟一块内存
4. filter(function, iterable)
    def is_odd(n):
        return n % 2 == 1
    new_list = filter(is_odd,[1,2,3,4])
5. iterable 和 iterator  （from collections import)
    list、dict都是可iterable， iterable只定义了__iter__()函数
    iterator定义了__iter__(self)(一般return self)  and  next()两个函数
6. partial
    def add(a,b,c=1):
        return a+b+c
    from functools import partial
    plus = partial(add,2)
    plus(2)
7. os, shutil, sys 模块
    os:
        创建文件夹 os.mkdir(dir_path)
        删除文件夹 os.rmdir(dir_path)
        删除文件 os.remove(file_path)
        文件\文件夹是否存在 os.path.exists(file_path)
        获取当前路径 os.getcwd()
        路径拼接 os.path.join(root_path, relative_path)  root_path后面会自动补‘/’
        判断是否是文件或文件夹 os.path.isfile()  os.path.isdir()
        获取当前文件夹的内容： 		for item in os.listdir(delDirName):
			                            itemsrc = os.path.join(delDirName, item)
    sys:
        获取命令行参数 sys.argv -> list
        python解释器当前的搜索路径list sys.path   可以通过sys.path.append添加路径
    shutil:
        删除带有子文件的文件夹（os.rmdir会不成功） shutil.rmtree()
        复制文件 shutil.copy(source_file, destination_file)
8. 使用subprocess运行命令行命令
    def run_cmd(cmd_str, output_file=None, stdout=False):
        if output_file is None:
            output_file = open(os.devnull, 'w')
        if stdout:
            output_file = sys.stdout
        p = subprocess.Popen(cmd_str, shell=True, stdout=output_file, stderr=output_file)
        return p.wait()
        
    def run_cmd_and_get_output(cmd_str):
        p = subprocess.Popen(cmd_str, shell=True, stdout=subprocess.PIPE)
        out = ""
        for l in iter(p.stdout.readline, b''):
            out += l
        p.stdout.close()
        p.wait()
        return out.strip()
        
